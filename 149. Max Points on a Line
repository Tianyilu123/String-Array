class Solution {
    public int maxPoints(int[][] points) {
        if(points.length <= 0) return 0;
        if(points.length <= 2) return points.length;
        int result = 0;
        for(int i = 0; i < points.length; i++){
            Map<String, Integer> hm = new HashMap<>();
            int samex = 1;
            int samey = 1;
            int samep = 0;
            for(int j = 0; j < points.length; j++){
                if(j != i) {
                    if((points[j][0] == points[i][0]) && (points[j][1] == points[i][1]))
                        samep++;
                    if(points[j][0] == points[i][0]){
                        samex++;
                        continue;
                    }
                    if(points[j][1] == points[i][1]) {
                        samey++;
                        continue;
                    }
                    int numerator = points[j][1] - points[i][1];
                    int denaminator = points[j][0] - points[i][0];
                    int gcd = gcd(numerator, denaminator);
                    String hashStr = (numerator/gcd) + "_" + (denaminator/gcd);
                    hm.put(hashStr,hm.getOrDefault(hashStr, 1) + 1);
                    result = Math.max(result, hm.get(hashStr) + samep);
                }
            }
            result = Math.max(result, Math.max(samex, samey));
        }
        return result;
    }
    
    private int gcd(int a,int b){
        	if (b==0) return a;
        	else return gcd(b,a%b);
        }
}
